version: "3"
services:
  car-service:
    image: car-service:latest
    build:
      context: ../
      args:
        module: car-service
    container_name: car-service
    environment:
      SPRING_PROFILES_ACTIVE: artemis
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/car_service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      CARSERVICE_KAFKA_TOPIC: orders
      SPRING_KAFKA_BOOTSTRAPSERVERS: apache-kafka:9092
      CARSERVICE_ARTEMIS_QUEUE: orders
      SPRING_ARTEMIS_BROKERURL: tcp://artemis:61616
      SPRING_ARTEMIS_USER: artemis
      SPRING_ARTEMIS_PASSWORD: artemis
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI: http://keycloak:8080/realms/car-service
    depends_on:
      postgresql:
        condition: service_healthy
      apache-kafka:
        condition: service_healthy
      artemis:
        condition: service_healthy
      keycloak:
        condition: service_started
    healthcheck:
      test: "nc -z localhost 8080 || exit 1"
    ports:
      - "8081:8080"
  apache-kafka-consumer:
    image: apache-kafka-consumer:latest
    build:
      context: ../
      args:
        module: apache-kafka-consumer
    container_name: apache-kafka-consumer
    environment:
      APACHEKAFKACONSUMER_KAFKA_TOPIC: orders
      SPRING_KAFKA_BOOTSTRAPSERVERS: apache-kafka:9092
    depends_on:
      apache-kafka:
        condition: service_healthy
    healthcheck:
      test: "nc -z localhost 8080 || exit 1"
  artemis-consumer:
    image: artemis-consumer:latest
    build:
      context: ../
      args:
        module: artemis-consumer
    container_name: artemis-consumer
    environment:
      ARTEMISCONSUMER_ARTEMIS_QUEUE: orders
      SPRING_ARTEMIS_BROKERURL: tcp://artemis:61616
      SPRING_ARTEMIS_USER: artemis
      SPRING_ARTEMIS_PASSWORD: artemis
    depends_on:
      artemis:
        condition: service_healthy
    healthcheck:
      test: "nc -z localhost 8080 || exit 1"
  postgresql:
    image: postgres:15.2-alpine
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: "pg_isready || exit 1"
    ports:
      - "5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: "nc -z localhost 2181 || exit 1"
    ports:
      - "2181"
  apache-kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: apache-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://apache-kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"
    ports:
      - "9092"
  artemis:
    image: quay.io/artemiscloud/activemq-artemis-broker:1.0.17
    container_name: artemis
    environment:
      AMQ_USER: artemis
      AMQ_PASSWORD: artemis
    healthcheck:
      test: "/home/jboss/broker/bin/artemis check node || exit 1"
    ports:
      - "61616"
  keycloak:
    image: keycloak/keycloak:21.1
    container_name: keycloak
    depends_on:
      - postgresql
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HEALTH_ENABLED: "true"
    command: start-dev --import-realm
    ports:
      - "8080:8080"
    volumes:
      - ./realm.json:/opt/keycloak/data/import/realm.json